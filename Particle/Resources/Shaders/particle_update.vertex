#version 410 core

layout (location = 0) in vec3 inPosition;
layout (location = 1) in vec3 inVelocity;
layout (location = 2) in vec4 inColor;
layout (location = 3) in float inLifespan;
layout (location = 4) in float inMass;

out vec3 outPosition;
out vec3 outVelocity;
out vec4 outColor;
out float outLifespan;
out float outMass;

uniform double dt;
uniform samplerBuffer tbo_id;
uniform vec2 speed_limit; // x: Min Speed, y: Max Speed
uniform vec4 grid_data; // x: Rows, y: Columns, z: Size X, w: Size Y
uniform float dragCoefficient;
uniform float gravity;

#define GD grid_data
#define ROWS GD.x
#define COLS GD.y
#define SIZE_ROW GD.z
#define SIZE_COL GD.w

#define SL speed_limit
#define MIN_SPEED SL.x
#define MAX_SPEED SL.y

vec3 CalculateDrag();
vec4 SampleForceTexture(samplerBuffer sampler);
int  SampleIndex(int modX, int modY);
void CheckBounds();

void main()
{
    vec4 textureSample;

    textureSample = SampleForceTexture(tbo_id);

    vec3 drag = CalculateDrag();
    //vec3 drag = vec3(0, 0, 0);
    vec3 calculatedVelocity = vec3(
        clamp(inVelocity.x + textureSample.x - drag.x, MIN_SPEED, MAX_SPEED),
        clamp(inVelocity.y + (textureSample.y * 0.09) - (gravity * inMass), MIN_SPEED, MAX_SPEED),
        clamp(inVelocity.z + textureSample.z - drag.z, MIN_SPEED, MAX_SPEED)
    );

    outPosition = inPosition + calculatedVelocity;
    CheckBounds();

    outColor = vec4(calculatedVelocity.xyz, 1);
    // outColor = vec4(inColor.xyz, alpha);
    // outColor = inColor;


    // These values are simply passed through... 
    outVelocity = calculatedVelocity;
    outLifespan = inLifespan;
    outMass = inMass;
}

vec3 CalculateDrag()
{
    float speed = length(inVelocity);
    float dragSpeed = dragCoefficient * speed * speed;
    vec3 drag = inVelocity.xyz * -1;
    drag = normalize(drag) * (dragCoefficient * speed * speed);
    return vec3(drag.x, drag.y, drag.z);
}

vec4 SampleForceTexture(samplerBuffer sampler)
{
    vec4 textureSample;
    float sampleStrength = 1.0;
    float samples = 1;

    // Immediate Samples (+/- 1 step, at 50% strength of previous sample level)
    for(int i = 1; i <= samples; ++i)
    {
        textureSample += (texelFetch(sampler, SampleIndex( 0,  i)) * samples); // Top
        textureSample += (texelFetch(sampler, SampleIndex(-i,  0)) * samples); // Left
        textureSample += (texelFetch(sampler, SampleIndex( i,  0)) * samples); // Right
        textureSample += (texelFetch(sampler, SampleIndex( 0, -i)) * samples); // Bottom

        textureSample += (texelFetch(sampler, SampleIndex(-i,  i)) * samples); // Top Left
        textureSample += (texelFetch(sampler, SampleIndex( i,  i)) * samples); // Top Right
        textureSample += (texelFetch(sampler, SampleIndex(-i, -i)) * samples); // Bottom Left
        textureSample += (texelFetch(sampler, SampleIndex( i, -i)) * samples); // Bottom Right

        sampleStrength *= 0.5;
    }

    return textureSample;
}

int SampleIndex(int modX, int modZ)
{
    return int( int(    (inPosition.x + modX) / SIZE_ROW) * COLS + int( (inPosition.z + modZ) / SIZE_COL) );
}

void CheckBounds()
{
    float cellSize = ROWS * SIZE_ROW;

    if (outPosition.x > cellSize) outPosition.x = 0;
    if (outPosition.x < 0) outPosition.x = cellSize;

    if (outPosition.z > cellSize) outPosition.z = 0;
    if (outPosition.z < 0) outPosition.z = cellSize;

    if (outPosition.y < 0) outPosition.y = 0;
}
