#version 410 core

layout (location = 0) in vec3 inPosition;
layout (location = 1) in vec3 inVelocity;
layout (location = 2) in vec4 inColor;
layout (location = 3) in float inLifespan;
layout (location = 4) in float inMass;

out vec3 outPosition;
out vec3 outVelocity;
out vec4 outColor;
out float outLifespan;
out float outMass;

uniform float dt;
uniform samplerBuffer tbo_id;

// TODO: Min & Max Speeds
// TODO: Grid Sizing

void main()
{
    vec4 textureSample;
    textureSample = texelFetch(tbo_id, int( int(inPosition.x / 100) * 100 + int(inPosition.y / 100) )); // Sample from position...

    vec3 dragForce = vec3(0.001, 0.001, 0);
    vec3 calculatedVelocity = vec3(
        clamp(inVelocity.x + textureSample.x - dragForce.x, -2, 2), 
        clamp(inVelocity.y + textureSample.y - dragForce.y, -2, 2),
        clamp(inVelocity.z + textureSample.z - dragForce.z, -2, 2)
    );

    outPosition = inPosition + calculatedVelocity;
    // outPosition = inPosition + vec3(inVelocity.x + textureSample.x, inVelocity.y + textureSample.y, 0);
    // We simply pass through these values, no need to work on them (at this stage)
    outVelocity = calculatedVelocity;
    outColor = vec4(calculatedVelocity.xyz, 1);
    outLifespan = inLifespan;
    outMass = inMass;
}