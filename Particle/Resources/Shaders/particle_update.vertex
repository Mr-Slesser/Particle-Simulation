#version 410 core

layout (location = 0) in vec3 inPosition;
layout (location = 1) in vec3 inVelocity;
layout (location = 2) in vec4 inColor;
layout (location = 3) in float inLifespan;
layout (location = 4) in float inMass;

out vec3 outPosition;
out vec3 outVelocity;
out vec4 outColor;
out float outLifespan;
out float outMass;

uniform float dt;
uniform samplerBuffer tbo_id;
uniform vec2 speed_limit; // x: Min Speed, y: Max Speed
uniform vec4 grid_data; // x: Rows, y: Columns, z: Size X, w: Size Y
uniform vec3 drag;

#define GD grid_data
#define ROWS GD.x
#define COLS GD.y
#define SIZE_ROW GD.z
#define SIZE_COL GD.w

#define SL speed_limit
#define MIN_SPEED SL.x
#define MAX_SPEED SL.y

vec4 SampleForceTexture();

void main()
{
    // Sample from position...
    vec4 textureSample = SampleForceTexture();

    vec3 calculatedVelocity = vec3(
        clamp(inVelocity.x + textureSample.x - drag.x, MIN_SPEED, MAX_SPEED),
        clamp(inVelocity.y + textureSample.y - drag.y, MIN_SPEED, MAX_SPEED),
        clamp(inVelocity.z + textureSample.z - drag.z, MIN_SPEED, MAX_SPEED)
    );

    outPosition = inPosition + calculatedVelocity;
    // outColor = vec4(calculatedVelocity.xyz, 1);
    outColor = inColor;


    // These values are simply passed through... 
    outVelocity = calculatedVelocity * 0.8;
    outLifespan = inLifespan;
    outMass = inMass;
}

vec4 SampleForceTexture()
{
    vec4 textureSample;
    textureSample = texelFetch(tbo_id, int( int(inPosition.x / SIZE_ROW) * COLS + int(inPosition.y / SIZE_COL) )); 
    return textureSample;
}